Violation_ID,Propfile,TestDirectory,Test,ViolationFile,LineNum,Classification,Notes,
617,Collections_SynchronizedCollection,,,./src/main/java/org/apache/commons/lang3/CharSet.java,240,Truebug,In this case set is being accesed without using synchronized in the contains method,
618,Iterator_HasNext,,,./src/main/java/org/apache/commons/lang3/ClassUtils.java,1435,Truebug,The nextSuperClass field calls next() without checking if hasnext exists leading to potential buggy behavior--especially since the method that calls a function that uses this potential null pointer calls a method,
619,Iterator_HasNext,,,./src/main/java/org/apache/commons/lang3/ThreadUtils.java,223,Falsealarm,Potential issue with spec imprecision-- isEmpty() is called in exchange for hasNext-- which semantially should behave the same,
620,Iterator_HasNext,,,./src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java,806,Falsealarm,In the context of where this is being called i'd argue it is a false alarm (comment from devs //skip the declaring class :P) when .next() is called here there is guaranteed to be an element in the iterator,
621,ListIterator_hasNextPrevious,,,./src/main/java/org/apache/commons/lang3/text/StrTokenizer.java,517,Falsealarm,hasnext is being overriden here next invokes hasnext in this context.
622,Iterator_HasNext,,,./src/main/java/com/asana/iterator/ItemIterator.java,19,Falsealarm,overriden hasNext -- there is no apparent call to next that happens before hasnext here anyways,
623,Iterator_HasNext,,,./src/main/java/com/asana/iterator/ItemIterator.java,25,Falsealarm,overriden hasNext -- not using built in,
624,Iterator_HasNext,,,./src/main/java/com/asana/iterator/ItemIterator.java,27,Falsealarm,overriden hasNext,
625,ByteArrayOutputStream_FlushBeforeRetrieve,,,./src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,78,Falsealarm,overriden for custom implementation,
626,ByteArrayOutputStream_FlushBeforeRetrieve,,,./src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,79,Falsealarm,overriden for custom implementation,
627,ByteArrayOutputStream_FlushBeforeRetrieve,,,./src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,106,Falsealarm,overriden for custom implementation,
628,ByteArrayOutputStream_FlushBeforeRetrieve,,,./src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,128,Falsealarm,overriden for custom implementation,
629,Iterator_HasNext,,,./src/main/java/org/apache/commons/codec/language/bm/Languages.java,102,Truebug,iterator().next being called without hasnext check on a base collection,
630,Iterator_HasNext,,,./src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,451,Falsealarm/HardToInspect,while iterator.hasNext() isn't called before next- the special context of this code makes me unlikely to believe a bug would be caused here primarily because two lists are working in tandem with this implementation where one list adds all elements to the other and the condition that exists before next checks to see if the other list (the one being added to) has a size of 1 which would imply that the original list whose iterator calls next should also have a size of 1,
631,OutputStream_ManipulateAfterClose,,,./src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,78,Falsealarm,custom implementation that overrides existing close,
632,OutputStream_ManipulateAfterClose,,,./src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,106,Falsealarm,N/A,
633,
634,
635,
636,
637,
638,
639,
640,
641,
642,
643,
644,
645,
646,
647,
648,
649,
650,
651,
652,
653,
654,
655,
656,
657,
658,
659,
660,
661,
662,
663,
664,
665,
666,
667,
668,
669,
670,
671,
672,
673,
674,
675,
