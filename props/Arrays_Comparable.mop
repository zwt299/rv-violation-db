package mop;

import java.util.*;
import java.lang.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;

/**
 * Warns if the argument of Arrays.sort(Object[]) or Arrays.sort(Object[],
 * int, int) is not comparable.
 *
 * All elements in the argument of Arrays.sort() must implement the Comparable
 * interface, and they must be mutually comparable.
 * http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort%28java.lang.Object[]%29
 *
 * This property verifies that each element implements the Comparable
 * interface, and comparing each pair of elements does not raise a
 * ClassCastException. This property requires O(n^2) time for n elements.
 *
 * @severity error
 */

Arrays_Comparable() {
	event invalid_sort before(Object[] arr) :
		target(Arrays) &&
		(
			call(void Arrays.sort(Object[])) ||
			call(void Arrays.sort(Object[], ..))
		) && args(arr, ..) {
		for (int i = 0; i < arr.length; ++i) {
			// Each element must implement the Comparable interface.
			Object o1 = arr[i];
			if (!(o1 instanceof Comparable)) {
				RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
				RVMLogging.out.println(Level.CRITICAL, i + "-th element does not implement the Comparable interface.");
			}
			Comparable c1 = (Comparable)o1;

			// All elements must be mutually comparable.
			for (int j = i + 1; j < arr.length; ++j) {
				try {
					Comparable c2 = (Comparable)arr[j];
					c1.compareTo(c2);
					c2.compareTo(c1);
				}
				catch (ClassCastException e) {
					RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
					RVMLogging.out.println(Level.CRITICAL, i + "-th element and " + j + "-th element are not comparable.");
				}
			}
		}
	}
}

