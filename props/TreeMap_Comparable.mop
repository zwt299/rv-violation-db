package mop;

import java.util.*;
import java.lang.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;

/**
 * Warns if a non-comparable key is about to be inserted into TreeMap.
 *
 * When a TreeMap object is created without a specific comparator, all keys
 * inserted into the map must implement the Comparable interface.
 * http://docs.oracle.com/javase/6/docs/api/java/util/TreeMap.html#TreeMap%28%29
 *
 * This property verifies that each key implements the Comparable interface,
 * but does not verify if all keys are mutually comparable because of
 * performance degradation.
 *
 * @severity error
 */

TreeMap_Comparable() {
	private void validate(Object elem, String msg) {
		if (!(elem instanceof Comparable)) {
			RVMLogging.out.println(Level.CRITICAL, msg);
			RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a TreeMap object.");
		}
	}

	private void validateAll(Map src, String msg) {
		for (Map.Entry entry : (Collection<Map.Entry>)src.entrySet()) {
			validate(entry.getKey(), msg);
		}
	}

	event create before(Map src) :
		call(TreeMap.new(Map)) && args(src) {
		validateAll(src, __DEFAULT_MESSAGE);
	}

	event put before(Object key) :
		call(* Map+.put(Object, Object)) && args(key, ..) && target(TreeMap){
		validate(key, __DEFAULT_MESSAGE);
	}

	event putall before(Map src) :
		call(* Map+.putAll(Map)) && args(src) &&target(TreeMap){
		validateAll(src, __DEFAULT_MESSAGE);
	}
}

