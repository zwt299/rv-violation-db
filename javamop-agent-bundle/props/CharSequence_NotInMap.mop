package mop;

import java.io.*;
import java.lang.*;
import java.nio.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;

/**
 * Warns if one tries to add a CharSequence object into a map as a key.
 * 
 * According to the manual, this inferface does not refine the general contracts of the
 * equals and hashCode methods. Therefore, it might not be safe to use CharSequence instances
 * as elements in a set
 * http://docs.oracle.com/javase/6/docs/api/java/lang/CharSequence.html
 * User should check whether the instance of CharSequence that he/she tries to use supports
 * those methods.
 * 
 * @severity warning
 */

CharSequence_NotInMap(Map map) {
	boolean flag = false;

	event map_put before(Map map) : call(* Map+.put(..)) && target(map) && args(CharSequence, ..) && !args(String, ..) && !args(CharBuffer, ..)
		&& condition(!flag){
			flag = true;
			RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
			RVMLogging.out.println(Level.CRITICAL, "It might not be safe to add a CharSequence instance into a map as a key"); 
		}

	event map_putall before(Map map, Map m) : call(* Map+.putAll(Map)) && args(m) && target(map) && condition(!flag) {
			for(Object o : m.keySet()){
				if(o instanceof CharSequence && !(o instanceof String) && !(o instanceof CharBuffer)){
					flag = true;
					RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
					RVMLogging.out.println(Level.CRITICAL, "It might not be safe to add a CharSequence instance into a map as a key");
				}
			} 
		}
}
