package mop;

import java.util.*;
import java.lang.*;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging;
import com.runtimeverification.rvmonitor.java.rt.RVMLogging.Level;

/**
 * Warns if a non-comparable element is about to be inserted into TreeSet.
 *
 * When a TreeSet object is created without a specific comparator, all
 * elements inserted into the map must implement the Comparable interface.
 * http://docs.oracle.com/javase/6/docs/api/java/util/TreeSet.html#TreeSet%28%29
 *
 * This property verifies that each element implements the Comparable
 * interface, but does not verify if all elements are mutually comparable
 * because of performance degradation.
 *
 * @severity error
 */

TreeSet_Comparable() {
	event add before(Object e) :
		(
			call(* Collection+.add*(..))
		) && target(TreeSet) && args(e) {
		if (!(e instanceof Comparable)) {
			RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
			RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a TreeSet object.");
		}
	}

	event addall before(Collection c) :
		call(* Collection+.addAll(Collection)) &&
		target(TreeSet) && args(c) {
		for (Object elem : c) {
			if (!(elem instanceof Comparable)) {
				RVMLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
				RVMLogging.out.println(Level.CRITICAL, "A non-comparable object is being inserted into a TreeSet object.");
			}
		}
	}
}


